FROM --platform=linux/amd64 node:18-alpine AS base
 
FROM base AS builder
RUN apk update
RUN corepack enable && corepack prepare pnpm@latest --activate && pnpm add -g turbo@^2
# Set working directory
WORKDIR /app
# Replace <your-major-version> with the major version installed in your repository. For example:
# RUN yarn global add turbo@^2
RUN yarn global add turbo@^2

COPY . .
 
# Generate a partial monorepo with a pruned lockfile for a target workspace.
# Assuming "admin" is the name entered in the project's package.json: { name: "admin" }
RUN turbo prune admin --docker
 
# Add lockfile and package.json's of isolated subworkspace
FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app
 
# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /out/json/ .
COPY --from=builder /out/pnpm-lock.yaml ./pnpm-lock.yaml
RUN pnpm install
 
# Build the project
COPY --from=builder /out/full/ .
RUN pnpm turbo run build --filter=admin...
 
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
 
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs
 
COPY --from=installer /apps/admin/next.config.mjs .
COPY --from=installer /apps/admin/package.json .
 
# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /apps/admin/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /apps/admin/.next/static ./apps/admin/.next/static
COPY --from=installer --chown=nextjs:nodejs /apps/admin/public ./apps/admin/public
 
CMD node apps/admin/server.js