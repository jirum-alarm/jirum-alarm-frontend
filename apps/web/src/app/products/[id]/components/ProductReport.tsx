'use client';

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useState } from 'react';
import { Drawer } from 'vaul';

import Button from '@/components/common/Button';
import { useToast } from '@/components/common/Toast';
import { ProductQueries } from '@/entities/product';
import useRedirectIfNotLoggedIn from '@/features/auth/useRedirectIfNotLoggedIn';
import { cn } from '@/lib/cn';
import { ProductQuery } from '@/shared/api/gql/graphql';
import { ProductService } from '@/shared/api/product';
const ProductReport = ({ product }: { product: NonNullable<ProductQuery['product']> }) => {
  return (
    <div className="px-5">
      <div
        className={cn(
          `flex h-[56px] items-center justify-between rounded-lg border bg-gray-50 p-[16px]`,
        )}
      >
        {product.isMyReported ? (
          <p className="flex items-center gap-2 text-sm text-gray-600">
            종료된 상품으로 제보해주셔서 감사해요 <span className="text-lg">😄</span>
          </p>
        ) : (
          <>
            <span className="text-sm text-gray-600">혹시 판매가 종료된 상품인가요?</span>
            <ProductReportModal productId={+product.id} />
          </>
        )}
      </div>
    </div>
  );
};

export default ProductReport;

const ProductReportModal = ({ productId }: { productId: number }) => {
  const queryClient = useQueryClient();
  const productKey = ProductQueries.product({ id: productId }).queryKey;
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { toast } = useToast();
  const { checkAndRedirect } = useRedirectIfNotLoggedIn();
  const { mutate: reportExpiredProduct } = useMutation({
    mutationFn: ProductService.reportExpiredProduct,
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: productKey,
      });
      setIsModalOpen(false);
      toast('제보해주셔서 감사해요 :)');
    },
    onError: () => {
      setIsModalOpen(false);
      toast('이미 종료 제보된 상품입니다 :(');
    },
  });

  const handleReportExpiredProductClick = () => {
    if (checkAndRedirect()) return;
    reportExpiredProduct({ productId });
  };

  const handleOpenChange = (open: boolean) => {
    setIsModalOpen(open);
  };
  return (
    <Drawer.Root onOpenChange={handleOpenChange} open={isModalOpen}>
      <Drawer.Trigger asChild>
        <button className="-m-2 p-2 text-gray-900">제보하기</button>
      </Drawer.Trigger>
      <Drawer.Portal>
        <Drawer.Overlay className="fixed inset-0 z-[9999] bg-black/40" />
        <Drawer.Content className="fixed inset-x-0 bottom-0 left-0 right-0 z-[9999] mx-auto h-fit max-w-screen-layout-max rounded-t-[20px] bg-white outline-none">
          <div className="flex flex-col items-center">
            <Drawer.Title asChild>
              <h2 className="pt-[32px] text-xl font-bold">판매가 종료된 상품인가요?</h2>
            </Drawer.Title>
            <SoldOutIcon />
            <p className="py-3 text-center text-gray-700">
              더 빠른 핫딜 확인을 위해
              <br />
              종료된 상품을 제보해 주세요!
            </p>
            <div className="flex w-full gap-[12px] p-5">
              <Drawer.Close asChild>
                <Button color={'secondary'}>취소</Button>
              </Drawer.Close>
              <Button onClick={handleReportExpiredProductClick}>종료 제보하기</Button>
            </div>
          </div>
        </Drawer.Content>
      </Drawer.Portal>
    </Drawer.Root>
  );
};

const SoldOutIcon = () => {
  return (
    <div className="relative mt-0.5 flex h-[172px] w-fit items-center justify-center">
      <svg
        width="136"
        height="136"
        viewBox="0 0 136 136"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g clipPath="url(#clip0_3_8134)">
          <rect width="136" height="136" rx="68" fill="#E6F1D7" />
          <path
            d="M103.388 89.1526C102.568 92.492 102.824 95.7606 101.051 98.9409C95.1502 109.569 85.0684 115.214 71.1232 115.744C50.0863 116.539 36.141 112.776 28.4143 104.215C22.1164 97.1917 20.026 86.935 22.0106 72.8352C22.1694 71.6691 22.3546 70.5294 22.5134 69.4428C22.5398 69.2043 22.5928 68.9657 22.6192 68.7272C25.9269 52.1626 29.1023 48.8232 29.1023 48.8232C29.1023 48.8232 39.3429 72.2256 44.1324 56.8272C45.2703 53.1698 45.9053 49.7508 46.3287 46.4909C46.3552 46.3849 46.3552 46.2524 46.3817 46.1199C47.9429 40.5542 48.4457 35.5716 48.922 30.7215C49.0278 29.7144 49.1337 28.7337 49.2395 27.7531V27.6736C49.2395 27.6736 49.2924 27.5411 49.3189 27.4616C50.4832 23.8306 52.3355 20.1202 55.3521 16.1182C55.3521 16.1182 57.8924 33.6368 65.2752 38.646C72.6315 43.6816 85.4389 46.3319 88.3232 59.4245C91.2075 72.5437 94.7268 62.0749 94.7268 62.0749C94.7268 62.0749 96.3145 66.7129 101.766 73.4713C103.512 75.6711 103.547 81.8642 103.388 89.1526Z"
            fill="white"
          />
          <path
            d="M88.8416 144.349C88.9916 145.449 88.1166 146.424 87.0166 146.424H65.2166C64.2166 146.424 63.3916 145.624 63.3916 144.599V123.499H64.0666C65.7166 123.499 67.4166 123.474 69.1666 123.399C69.3916 123.399 69.6166 123.374 69.8166 123.349L71.3666 135.974C71.4416 136.549 71.9416 136.999 72.5416 136.999H81.4416C81.4416 136.999 87.8166 136.999 88.8416 144.349Z"
            fill="black"
          />
          <path
            d="M59.0164 123.376V144.601C59.0164 145.626 58.1914 146.426 57.1914 146.426H35.3914C34.2914 146.426 33.4414 145.451 33.5914 144.351C34.5914 137.001 40.9914 137.001 40.9914 137.001H49.8664C50.4664 137.001 50.9664 136.551 51.0414 135.976L52.6664 122.876C54.6914 123.126 56.7914 123.301 59.0164 123.376Z"
            fill="black"
          />
          <path
            d="M100.991 95.7515C100.216 98.9015 99.0414 102.052 97.3664 105.052C91.7914 115.077 82.2664 120.402 69.0914 120.902C49.2164 121.652 36.0414 118.102 28.7414 110.026C22.7914 103.402 20.8164 93.7265 22.6914 80.4265C22.8414 79.3265 23.0164 78.2515 23.1664 77.2265C23.1914 77.0015 23.2414 76.7765 23.2664 76.5515C26.3914 60.9265 29.3914 57.7765 29.3914 57.7765C29.3914 57.7765 39.0664 79.8515 43.5914 65.3265C44.6664 61.8765 45.2664 58.6515 45.6664 55.5765C45.6914 55.4765 45.6914 55.3515 45.7164 55.2265C47.1914 49.9765 47.6664 45.2765 48.1164 40.7015C48.2164 39.7515 48.3164 38.8265 48.4164 37.9015V37.8265C48.4164 37.8265 48.4664 37.7015 48.4914 37.6265C49.5914 34.2015 51.3414 30.7015 54.1914 26.9265C54.1914 26.9265 56.5914 43.4515 63.5664 48.1765C70.5164 52.9265 82.6164 55.4265 85.3414 67.7765C88.0664 80.1515 91.3914 70.2765 91.3914 70.2765C91.3914 70.2765 92.8914 74.6515 98.0414 81.0265C99.6914 83.1015 101.141 88.8765 100.991 95.7515Z"
            fill="#9EF22E"
          />
          <path
            d="M59.9872 86.0295C55.3533 86.0295 52.5327 82.6044 51.6009 80.4134C51.1979 79.4564 51.626 78.3483 52.583 77.9453C53.54 77.5424 54.6481 77.9705 55.0511 78.9275C55.2526 79.406 57.2169 83.4355 62.0775 81.9244C63.0849 81.5971 64.1426 82.1763 64.4448 83.1585C64.747 84.1658 64.193 85.2236 63.2108 85.5258C62.0523 85.8784 60.9694 86.0547 59.962 86.0547L59.9872 86.0295Z"
            fill="black"
          />
          <path
            d="M66.8664 73.9503C68.1643 73.9503 69.2164 72.8982 69.2164 71.6003C69.2164 70.3025 68.1643 69.2503 66.8664 69.2503C65.5686 69.2503 64.5164 70.3025 64.5164 71.6003C64.5164 72.8982 65.5686 73.9503 66.8664 73.9503ZM56.9165 73.9503C58.2144 73.9503 59.2665 72.8982 59.2665 71.6003C59.2665 70.3025 58.2144 69.2503 56.9165 69.2503C55.6186 69.2503 54.5665 70.3025 54.5665 71.6003C54.5665 72.8982 55.6186 73.9503 56.9165 73.9503Z"
            fill="black"
            stroke="black"
            strokeWidth="0.2"
          />
          <path
            d="M102.667 72.125C102.067 71.075 101.467 70 100.892 68.95C98.2915 64.225 96.6415 61.3 95.2415 60.35L93.8915 59.425L93.3665 61C92.8915 62.425 91.9665 63.975 91.5665 64.1C91.5665 64.075 90.5165 63.65 89.3915 58.5C87.1165 48.125 79.0915 44.05 72.0165 40.475C69.7915 39.325 67.6665 38.25 65.8915 37.05C59.0915 32.4 56.5665 15.625 56.5415 15.45L56.0915 12.5L54.2915 14.9C47.2665 24.2 46.4665 32.1 45.6415 40.45C45.1665 45.275 44.6665 50.25 42.9415 55.8C42.0665 58.525 40.9915 60.075 39.8915 60.15H39.7915C36.9915 60.15 32.5415 52.9 30.2665 47.7L29.4165 45.725L28.1165 47.45C27.9665 47.675 24.0665 53.125 20.2165 80.075C18.2165 94.15 20.3915 104.5 26.8915 111.7C32.3915 117.8 40.8915 121.5 52.6665 122.875C54.6915 123.125 56.7915 123.3 59.0165 123.375C60.4415 123.45 61.8915 123.5 63.3915 123.5H64.0665C65.7165 123.5 67.4165 123.475 69.1665 123.4C69.3915 123.4 69.6165 123.375 69.8165 123.35C83.4165 122.675 93.6915 116.775 99.5665 106.275C106.767 93.35 105.392 76.95 102.667 72.125ZM100.992 95.75C100.217 98.9 99.0415 102.05 97.3665 105.05C94.5665 110.075 90.7915 113.9 86.0665 116.55C85.4915 116.875 84.8915 117.2 84.2665 117.475C82.4915 118.325 80.5665 119.025 78.5415 119.55C77.8415 119.75 77.1165 119.9 76.3915 120.05C75.6915 120.2 74.9415 120.325 74.2165 120.425C73.4415 120.55 72.6665 120.65 71.8665 120.7C71.0915 120.775 70.2915 120.825 69.4915 120.875C69.3665 120.9 69.2165 120.9 69.0915 120.9C67.1165 120.975 65.2165 121 63.3915 121C61.8915 121 60.4165 120.95 59.0165 120.875C57.8165 120.825 56.6415 120.75 55.5165 120.65C54.6415 120.575 53.7915 120.5 52.9665 120.4C52.2665 120.325 51.5915 120.225 50.9165 120.125C50.3165 120.05 49.7165 119.95 49.1415 119.85C47.7665 119.6 46.4415 119.325 45.1915 119.025C44.6165 118.875 44.0415 118.725 43.4665 118.55C43.0915 118.45 42.7415 118.35 42.3915 118.25C41.6915 118.025 41.0165 117.8 40.3665 117.55C39.1665 117.1 38.0415 116.625 36.9915 116.125C36.6165 115.925 36.2415 115.75 35.8915 115.55C33.8915 114.475 32.1165 113.225 30.5665 111.825C30.2665 111.575 29.9915 111.325 29.7415 111.05C29.3915 110.725 29.0665 110.375 28.7415 110.025C22.7915 103.4 20.8165 93.725 22.6915 80.425C22.8415 79.325 23.0165 78.25 23.1665 77.225C23.1915 77 23.2415 76.775 23.2665 76.55C25.5915 61.5 27.8415 54.275 29.1165 51.1C31.1915 55.275 35.4665 62.65 39.8165 62.65C39.8915 62.65 39.9665 62.65 40.0415 62.65C42.3165 62.525 44.0915 60.475 45.3165 56.575C45.4665 56.125 45.5915 55.675 45.7165 55.25C47.1915 50 47.6665 45.3 48.1165 40.725C48.2165 39.775 48.3165 38.85 48.4165 37.925V37.85C49.1415 31.425 50.1915 25.525 54.5915 18.825C55.7165 24.15 58.6165 35.125 64.4915 39.15C66.3915 40.425 68.5665 41.55 70.8915 42.725C77.7915 46.225 84.9165 49.85 86.9415 59.05C88.0665 64.175 89.4415 66.5 91.4165 66.6C93.0915 66.75 94.1915 65.125 94.9415 63.725C95.9915 65.25 97.4165 67.825 98.6915 70.175C99.2915 71.225 99.8915 72.3 100.492 73.375C102.142 76.325 103.467 85.925 100.992 95.775V95.75Z"
            fill="black"
          />
        </g>
        <defs>
          <clipPath id="clip0_3_8134">
            <rect width="136" height="136" rx="68" fill="white" />
          </clipPath>
        </defs>
      </svg>
      <div className="absolute -right-[2.65rem] top-0 z-50">
        <Clock />
      </div>
    </div>
  );
};

const Clock = () => {
  return (
    <svg width="90" height="88" viewBox="0 0 90 88" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g filter="url(#filter0_d_3_8145)">
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M46 74C63.6731 74 78 59.6731 78 42C78 24.3269 63.6731 10 46 10C28.3269 10 14 24.3269 14 42C14 46.2935 14.8456 50.3895 16.3793 54.1305L12 68.3164L24.2943 65.5132C29.9982 70.7813 37.6233 74 46 74Z"
          fill="white"
        />
      </g>
      <path
        d="M50.1667 26.3749H41.8333C40.5833 26.3749 39.75 25.5416 39.75 24.2916C39.75 23.0416 40.5833 22.2083 41.8333 22.2083H50.1667C51.4167 22.2083 52.25 23.0416 52.25 24.2916C52.25 25.5416 51.4167 26.3749 50.1667 26.3749Z"
        fill="#BC0017"
      />
      <path
        d="M45.9998 47.2084C44.7498 47.2084 43.9165 46.3751 43.9165 45.1251V38.8751C43.9165 37.6251 44.7498 36.7917 45.9998 36.7917C47.2498 36.7917 48.0832 37.6251 48.0832 38.8751V45.1251C48.0832 46.3751 47.2498 47.2084 45.9998 47.2084Z"
        fill="white"
      />
      <path
        d="M46.0002 28.4583C36.8335 28.4583 29.3335 35.9583 29.3335 45.1249C29.3335 54.2916 36.8335 61.7916 46.0002 61.7916C55.1668 61.7916 62.6668 54.2916 62.6668 45.1249C62.6668 35.9583 55.1668 28.4583 46.0002 28.4583ZM48.0835 45.1249C48.0835 46.3749 47.2502 47.2083 46.0002 47.2083C44.7502 47.2083 43.9168 46.3749 43.9168 45.1249V38.8749C43.9168 37.6249 44.7502 36.7916 46.0002 36.7916C47.2502 36.7916 48.0835 37.6249 48.0835 38.8749V45.1249Z"
        fill="#F799A4"
      />
      <path
        d="M32.875 34.9167C33.7083 33.875 34.75 32.8333 35.7917 32L33.9167 30.125C33.0833 29.2917 31.8333 29.2917 31 30.125C30.1667 30.9583 30.1667 32.2083 31 33.0417L32.875 34.9167ZM59.125 34.9167L61 33.0417C61.8333 32.2083 61.8333 30.9583 61 30.125C60.1667 29.2917 58.9167 29.2917 58.0833 30.125L56.2083 32C57.25 32.8333 58.2917 33.875 59.125 34.9167Z"
        fill="#BC0017"
      />
      <path
        d="M46 48.25C47.7259 48.25 49.125 46.8509 49.125 45.125C49.125 43.3991 47.7259 42 46 42C44.2741 42 42.875 43.3991 42.875 45.125C42.875 46.8509 44.2741 48.25 46 48.25Z"
        fill="#BC0017"
      />
      <defs>
        <filter
          id="filter0_d_3_8145"
          x="0"
          y="0"
          width="90"
          height="88"
          filterUnits="userSpaceOnUse"
          colorInterpolationFilters="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix" />
          <feColorMatrix
            in="SourceAlpha"
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
            result="hardAlpha"
          />
          <feOffset dy="2" />
          <feGaussianBlur stdDeviation="6" />
          <feComposite in2="hardAlpha" operator="out" />
          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.08 0" />
          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_3_8145" />
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="effect1_dropShadow_3_8145"
            result="shape"
          />
        </filter>
      </defs>
    </svg>
  );
};
